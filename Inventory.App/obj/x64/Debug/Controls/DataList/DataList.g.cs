#pragma checksum "C:\WH\InventorySample\src\Inventory.App\Controls\DataList\DataList.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "3EF01E3F6468C926E81E33401E1DE076414FC2D38478D8560D0DA9B5BB0B53C8"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Controls
{
    partial class DataList : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Inventory_Controls_ListToolbar_DefaultCommands(global::Inventory.Controls.ListToolbar obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.DefaultCommands = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_ListToolbar_NewLabel(global::Inventory.Controls.ListToolbar obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.NewLabel = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_ListToolbar_Query(global::Inventory.Controls.ListToolbar obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Query = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_ListToolbar_ToolbarMode(global::Inventory.Controls.ListToolbar obj, global::Inventory.Controls.ListToolbarMode value)
            {
                obj.ToolbarMode = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemTemplate(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::Windows.UI.Xaml.DataTemplate value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.DataTemplate) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.DataTemplate), targetNullValue);
                }
                obj.ItemTemplate = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ListViewBase_SelectionMode(global::Windows.UI.Xaml.Controls.ListViewBase obj, global::Windows.UI.Xaml.Controls.ListViewSelectionMode value)
            {
                obj.SelectionMode = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_ContentTemplate(global::Windows.UI.Xaml.Controls.ContentControl obj, global::Windows.UI.Xaml.DataTemplate value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.DataTemplate) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.DataTemplate), targetNullValue);
                }
                obj.ContentTemplate = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DataList_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDataList_Bindings
        {
            private global::Inventory.Controls.DataList dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Inventory.Controls.ListToolbar obj2;
            private global::Windows.UI.Xaml.Controls.Grid obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;
            private global::Windows.UI.Xaml.Documents.Run obj5;
            private global::Windows.UI.Xaml.Controls.ListView obj6;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Windows.UI.Xaml.Controls.ContentControl obj8;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2DefaultCommandsDisabled = false;
            private static bool isobj2NewLabelDisabled = false;
            private static bool isobj2QueryDisabled = false;
            private static bool isobj2ToolbarModeDisabled = false;
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj6ItemsSourceDisabled = false;
            private static bool isobj6ItemTemplateDisabled = false;
            private static bool isobj6SelectedItemDisabled = false;
            private static bool isobj6SelectionModeDisabled = false;
            private static bool isobj6VisibilityDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj7VisibilityDisabled = false;
            private static bool isobj8ContentTemplateDisabled = false;

            private DataList_obj1_BindingsTracking bindingsTracking;

            public DataList_obj1_Bindings()
            {
                this.bindingsTracking = new DataList_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 20 && columnNumber == 13)
                {
                    isobj2DefaultCommandsDisabled = true;
                }
                else if (lineNumber == 21 && columnNumber == 13)
                {
                    isobj2NewLabelDisabled = true;
                }
                else if (lineNumber == 22 && columnNumber == 13)
                {
                    isobj2QueryDisabled = true;
                }
                else if (lineNumber == 24 && columnNumber == 13)
                {
                    isobj2ToolbarModeDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 28)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 49 && columnNumber == 91)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 22)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 37 && columnNumber == 19)
                {
                    isobj6ItemsSourceDisabled = true;
                }
                else if (lineNumber == 38 && columnNumber == 19)
                {
                    isobj6ItemTemplateDisabled = true;
                }
                else if (lineNumber == 40 && columnNumber == 19)
                {
                    isobj6SelectedItemDisabled = true;
                }
                else if (lineNumber == 41 && columnNumber == 19)
                {
                    isobj6SelectionModeDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 19)
                {
                    isobj6VisibilityDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 35)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 87)
                {
                    isobj7VisibilityDisabled = true;
                }
                else if (lineNumber == 29 && columnNumber == 29)
                {
                    isobj8ContentTemplateDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Controls\DataList\DataList.xaml line 19
                        this.obj2 = (global::Inventory.Controls.ListToolbar)target;
                        this.bindingsTracking.RegisterTwoWayListener_2(this.obj2);
                        break;
                    case 3: // Controls\DataList\DataList.xaml line 48
                        this.obj3 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 4: // Controls\DataList\DataList.xaml line 49
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 5: // Controls\DataList\DataList.xaml line 50
                        this.obj5 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 6: // Controls\DataList\DataList.xaml line 35
                        this.obj6 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        this.bindingsTracking.RegisterTwoWayListener_6(this.obj6);
                        break;
                    case 7: // Controls\DataList\DataList.xaml line 44
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 8: // Controls\DataList\DataList.xaml line 29
                        this.obj8 = (global::Windows.UI.Xaml.Controls.ContentControl)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IDataList_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Controls.DataList)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Controls.DataList obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_DefaultCommands(obj.DefaultCommands, phase);
                        this.Update_NewLabel(obj.NewLabel, phase);
                        this.Update_Query(obj.Query, phase);
                        this.Update_ToolbarMode(obj.ToolbarMode, phase);
                        this.Update_IsDataAvailable(obj.IsDataAvailable, phase);
                        this.Update_IsMultipleSelection(obj.IsMultipleSelection, phase);
                        this.Update_SelectedItemsCount(obj.SelectedItemsCount, phase);
                        this.Update_ItemsSource(obj.ItemsSource, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ItemTemplate(obj.ItemTemplate, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SelectedItem(obj.SelectedItem, phase);
                        this.Update_SelectionMode(obj.SelectionMode, phase);
                        this.Update_DataUnavailableMessage(obj.DataUnavailableMessage, phase);
                        this.Update_IsDataUnavailable(obj.IsDataUnavailable, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_HeaderTemplate(obj.HeaderTemplate, phase);
                    }
                }
            }
            private void Update_DefaultCommands(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 19
                    if (!isobj2DefaultCommandsDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_ListToolbar_DefaultCommands(this.obj2, obj, null);
                    }
                }
            }
            private void Update_NewLabel(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 19
                    if (!isobj2NewLabelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_ListToolbar_NewLabel(this.obj2, obj, null);
                    }
                }
            }
            private void Update_Query(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 19
                    if (!isobj2QueryDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_ListToolbar_Query(this.obj2, obj, null);
                    }
                }
            }
            private void Update_ToolbarMode(global::Inventory.Controls.ListToolbarMode obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 19
                    if (!isobj2ToolbarModeDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_ListToolbar_ToolbarMode(this.obj2, obj);
                    }
                }
            }
            private void Update_IsDataAvailable(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_IsDataAvailable_Cast_IsDataAvailable_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_IsDataAvailable_Cast_IsDataAvailable_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 48
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, obj);
                    }
                    // Controls\DataList\DataList.xaml line 35
                    if (!isobj6VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj6, obj);
                    }
                }
            }
            private void Update_IsMultipleSelection(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_IsMultipleSelection_Cast_IsMultipleSelection_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_IsMultipleSelection_Cast_IsMultipleSelection_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 49
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, obj);
                    }
                }
            }
            private void Update_SelectedItemsCount(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 50
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj5, obj.ToString(), null);
                    }
                }
            }
            private void Update_ItemsSource(global::System.Collections.IEnumerable obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 35
                    if (!isobj6ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ItemTemplate(global::Windows.UI.Xaml.DataTemplate obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\DataList\DataList.xaml line 35
                    if (!isobj6ItemTemplateDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemTemplate(this.obj6, obj, null);
                    }
                }
            }
            private void Update_SelectedItem(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 35
                    if (!isobj6SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj6, obj, null);
                    }
                }
            }
            private void Update_SelectionMode(global::Windows.UI.Xaml.Controls.ListViewSelectionMode obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 35
                    if (!isobj6SelectionModeDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ListViewBase_SelectionMode(this.obj6, obj);
                    }
                }
            }
            private void Update_DataUnavailableMessage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 44
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                    }
                }
            }
            private void Update_IsDataUnavailable(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_IsDataUnavailable_Cast_IsDataUnavailable_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_IsDataUnavailable_Cast_IsDataUnavailable_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataList\DataList.xaml line 44
                    if (!isobj7VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, obj);
                    }
                }
            }
            private void Update_HeaderTemplate(global::Windows.UI.Xaml.DataTemplate obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\DataList\DataList.xaml line 29
                    if (!isobj8ContentTemplateDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_ContentTemplate(this.obj8, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_2_Query()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.Query = this.obj2.Query;
                    }
                }
            }
            private void UpdateTwoWay_6_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.SelectedItem = this.obj6.SelectedItem;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DataList_obj1_BindingsTracking
            {
                private global::System.WeakReference<DataList_obj1_Bindings> weakRefToBindingObj; 

                public DataList_obj1_BindingsTracking(DataList_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DataList_obj1_Bindings>(obj);
                }

                public DataList_obj1_Bindings TryGetBindingObject()
                {
                    DataList_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DataList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Controls.DataList obj = sender as global::Inventory.Controls.DataList;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_DefaultCommands(obj.DefaultCommands, DATA_CHANGED);
                                bindings.Update_NewLabel(obj.NewLabel, DATA_CHANGED);
                                bindings.Update_Query(obj.Query, DATA_CHANGED);
                                bindings.Update_ToolbarMode(obj.ToolbarMode, DATA_CHANGED);
                                bindings.Update_IsDataAvailable(obj.IsDataAvailable, DATA_CHANGED);
                                bindings.Update_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                bindings.Update_SelectedItemsCount(obj.SelectedItemsCount, DATA_CHANGED);
                                bindings.Update_ItemsSource(obj.ItemsSource, DATA_CHANGED);
                                bindings.Update_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                bindings.Update_SelectionMode(obj.SelectionMode, DATA_CHANGED);
                                bindings.Update_DataUnavailableMessage(obj.DataUnavailableMessage, DATA_CHANGED);
                                bindings.Update_IsDataUnavailable(obj.IsDataUnavailable, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "DefaultCommands":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DefaultCommands(obj.DefaultCommands, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NewLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NewLabel(obj.NewLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Query":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Query(obj.Query, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ToolbarMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ToolbarMode(obj.ToolbarMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDataAvailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsDataAvailable(obj.IsDataAvailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsMultipleSelection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedItemsCount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SelectedItemsCount(obj.SelectedItemsCount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ItemsSource":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ItemsSource(obj.ItemsSource, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectionMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SelectionMode(obj.SelectionMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DataUnavailableMessage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DataUnavailableMessage(obj.DataUnavailableMessage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDataUnavailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsDataUnavailable(obj.IsDataUnavailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void DependencyPropertyChanged_DefaultCommands(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataList obj = sender as global::Inventory.Controls.DataList;
                        if (obj != null)
                        {
                            bindings.Update_DefaultCommands(obj.DefaultCommands, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_NewLabel(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataList obj = sender as global::Inventory.Controls.DataList;
                        if (obj != null)
                        {
                            bindings.Update_NewLabel(obj.NewLabel, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_Query(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataList obj = sender as global::Inventory.Controls.DataList;
                        if (obj != null)
                        {
                            bindings.Update_Query(obj.Query, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_IsMultipleSelection(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataList obj = sender as global::Inventory.Controls.DataList;
                        if (obj != null)
                        {
                            bindings.Update_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_SelectedItemsCount(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataList obj = sender as global::Inventory.Controls.DataList;
                        if (obj != null)
                        {
                            bindings.Update_SelectedItemsCount(obj.SelectedItemsCount, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_ItemsSource(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataList obj = sender as global::Inventory.Controls.DataList;
                        if (obj != null)
                        {
                            bindings.Update_ItemsSource(obj.ItemsSource, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_SelectedItem(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataList obj = sender as global::Inventory.Controls.DataList;
                        if (obj != null)
                        {
                            bindings.Update_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_DefaultCommands = 0;
                private long tokenDPC_NewLabel = 0;
                private long tokenDPC_Query = 0;
                private long tokenDPC_IsMultipleSelection = 0;
                private long tokenDPC_SelectedItemsCount = 0;
                private long tokenDPC_ItemsSource = 0;
                private long tokenDPC_SelectedItem = 0;
                public void UpdateChildListeners_(global::Inventory.Controls.DataList obj)
                {
                    DataList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataList.DefaultCommandsProperty, tokenDPC_DefaultCommands);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataList.NewLabelProperty, tokenDPC_NewLabel);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataList.QueryProperty, tokenDPC_Query);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataList.IsMultipleSelectionProperty, tokenDPC_IsMultipleSelection);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataList.SelectedItemsCountProperty, tokenDPC_SelectedItemsCount);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataList.ItemsSourceProperty, tokenDPC_ItemsSource);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataList.SelectedItemProperty, tokenDPC_SelectedItem);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                            tokenDPC_DefaultCommands = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.DefaultCommandsProperty, DependencyPropertyChanged_DefaultCommands);
                            tokenDPC_NewLabel = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.NewLabelProperty, DependencyPropertyChanged_NewLabel);
                            tokenDPC_Query = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.QueryProperty, DependencyPropertyChanged_Query);
                            tokenDPC_IsMultipleSelection = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.IsMultipleSelectionProperty, DependencyPropertyChanged_IsMultipleSelection);
                            tokenDPC_SelectedItemsCount = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.SelectedItemsCountProperty, DependencyPropertyChanged_SelectedItemsCount);
                            tokenDPC_ItemsSource = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.ItemsSourceProperty, DependencyPropertyChanged_ItemsSource);
                            tokenDPC_SelectedItem = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.SelectedItemProperty, DependencyPropertyChanged_SelectedItem);
                        }
                    }
                }
                public void RegisterTwoWayListener_2(global::Inventory.Controls.ListToolbar sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.ListToolbar.QueryProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_2_Query();
                        }
                    });
                }
                public void RegisterTwoWayListener_6(global::Windows.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Controls\DataList\DataList.xaml line 19
                {
                    global::Inventory.Controls.ListToolbar element2 = (global::Inventory.Controls.ListToolbar)(target);
                    ((global::Inventory.Controls.ListToolbar)element2).QuerySubmitted += this.OnQuerySubmitted;
                    ((global::Inventory.Controls.ListToolbar)element2).ButtonClick += this.OnToolbarClick;
                }
                break;
            case 6: // Controls\DataList\DataList.xaml line 35
                {
                    this.listview = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.listview).DoubleTapped += this.OnDoubleTapped;
                    ((global::Windows.UI.Xaml.Controls.ListView)this.listview).SelectionChanged += this.OnSelectionChanged;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Controls\DataList\DataList.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    DataList_obj1_Bindings bindings = new DataList_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

