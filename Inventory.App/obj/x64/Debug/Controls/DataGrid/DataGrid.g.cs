#pragma checksum "C:\WH\InventorySample\src\Inventory.App\Controls\DataGrid\DataGrid.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "16E849A3E6ABAE4F4301FBC18A50452D18374602EBA485F33B5E471807DE720A"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Controls
{
    partial class DataGrid : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Inventory_Controls_ListToolbar_NewLabel(global::Inventory.Controls.ListToolbar obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.NewLabel = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_ListToolbar_Query(global::Inventory.Controls.ListToolbar obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Query = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_ListToolbar_ToolbarMode(global::Inventory.Controls.ListToolbar obj, global::Inventory.Controls.ListToolbarMode value)
            {
                obj.ToolbarMode = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemTemplate(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::Windows.UI.Xaml.DataTemplate value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.DataTemplate) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.DataTemplate), targetNullValue);
                }
                obj.ItemTemplate = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ListViewBase_SelectionMode(global::Windows.UI.Xaml.Controls.ListViewBase obj, global::Windows.UI.Xaml.Controls.ListViewSelectionMode value)
            {
                obj.SelectionMode = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DataGrid_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDataGrid_Bindings
        {
            private global::Inventory.Controls.DataGrid dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Inventory.Controls.ListToolbar obj2;
            private global::Inventory.Controls.AdaptiveGridView obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2NewLabelDisabled = false;
            private static bool isobj2QueryDisabled = false;
            private static bool isobj2ToolbarModeDisabled = false;
            private static bool isobj3ItemsSourceDisabled = false;
            private static bool isobj3ItemTemplateDisabled = false;
            private static bool isobj3SelectedItemDisabled = false;
            private static bool isobj3SelectionModeDisabled = false;
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj4TextDisabled = false;
            private static bool isobj4VisibilityDisabled = false;

            private DataGrid_obj1_BindingsTracking bindingsTracking;

            public DataGrid_obj1_Bindings()
            {
                this.bindingsTracking = new DataGrid_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 19 && columnNumber == 13)
                {
                    isobj2NewLabelDisabled = true;
                }
                else if (lineNumber == 20 && columnNumber == 13)
                {
                    isobj2QueryDisabled = true;
                }
                else if (lineNumber == 22 && columnNumber == 13)
                {
                    isobj2ToolbarModeDisabled = true;
                }
                else if (lineNumber == 31 && columnNumber == 40)
                {
                    isobj3ItemsSourceDisabled = true;
                }
                else if (lineNumber == 32 && columnNumber == 40)
                {
                    isobj3ItemTemplateDisabled = true;
                }
                else if (lineNumber == 34 && columnNumber == 40)
                {
                    isobj3SelectedItemDisabled = true;
                }
                else if (lineNumber == 35 && columnNumber == 40)
                {
                    isobj3SelectionModeDisabled = true;
                }
                else if (lineNumber == 40 && columnNumber == 40)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 42 && columnNumber == 35)
                {
                    isobj4TextDisabled = true;
                }
                else if (lineNumber == 42 && columnNumber == 87)
                {
                    isobj4VisibilityDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Controls\DataGrid\DataGrid.xaml line 18
                        this.obj2 = (global::Inventory.Controls.ListToolbar)target;
                        this.bindingsTracking.RegisterTwoWayListener_2(this.obj2);
                        break;
                    case 3: // Controls\DataGrid\DataGrid.xaml line 27
                        this.obj3 = (global::Inventory.Controls.AdaptiveGridView)target;
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // Controls\DataGrid\DataGrid.xaml line 42
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IDataGrid_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Controls.DataGrid)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Controls.DataGrid obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_NewLabel(obj.NewLabel, phase);
                        this.Update_Query(obj.Query, phase);
                        this.Update_ToolbarMode(obj.ToolbarMode, phase);
                        this.Update_ItemsSource(obj.ItemsSource, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ItemTemplate(obj.ItemTemplate, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SelectedItem(obj.SelectedItem, phase);
                        this.Update_SelectionMode(obj.SelectionMode, phase);
                        this.Update_IsDataAvailable(obj.IsDataAvailable, phase);
                        this.Update_DataUnavailableMessage(obj.DataUnavailableMessage, phase);
                        this.Update_IsDataUnavailable(obj.IsDataUnavailable, phase);
                    }
                }
            }
            private void Update_NewLabel(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 18
                    if (!isobj2NewLabelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_ListToolbar_NewLabel(this.obj2, obj, null);
                    }
                }
            }
            private void Update_Query(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 18
                    if (!isobj2QueryDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_ListToolbar_Query(this.obj2, obj, null);
                    }
                }
            }
            private void Update_ToolbarMode(global::Inventory.Controls.ListToolbarMode obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 18
                    if (!isobj2ToolbarModeDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_ListToolbar_ToolbarMode(this.obj2, obj);
                    }
                }
            }
            private void Update_ItemsSource(global::System.Collections.IEnumerable obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 27
                    if (!isobj3ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ItemTemplate(global::Windows.UI.Xaml.DataTemplate obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 27
                    if (!isobj3ItemTemplateDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemTemplate(this.obj3, obj, null);
                    }
                }
            }
            private void Update_SelectedItem(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 27
                    if (!isobj3SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj3, obj, null);
                    }
                }
            }
            private void Update_SelectionMode(global::Windows.UI.Xaml.Controls.ListViewSelectionMode obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 27
                    if (!isobj3SelectionModeDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ListViewBase_SelectionMode(this.obj3, obj);
                    }
                }
            }
            private void Update_IsDataAvailable(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_IsDataAvailable_Cast_IsDataAvailable_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_IsDataAvailable_Cast_IsDataAvailable_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 27
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, obj);
                    }
                }
            }
            private void Update_DataUnavailableMessage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 42
                    if (!isobj4TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                    }
                }
            }
            private void Update_IsDataUnavailable(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_IsDataUnavailable_Cast_IsDataUnavailable_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_IsDataUnavailable_Cast_IsDataUnavailable_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Controls\DataGrid\DataGrid.xaml line 42
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, obj);
                    }
                }
            }
            private void UpdateTwoWay_2_Query()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.Query = this.obj2.Query;
                    }
                }
            }
            private void UpdateTwoWay_3_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.SelectedItem = this.obj3.SelectedItem;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DataGrid_obj1_BindingsTracking
            {
                private global::System.WeakReference<DataGrid_obj1_Bindings> weakRefToBindingObj; 

                public DataGrid_obj1_BindingsTracking(DataGrid_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DataGrid_obj1_Bindings>(obj);
                }

                public DataGrid_obj1_Bindings TryGetBindingObject()
                {
                    DataGrid_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DataGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Controls.DataGrid obj = sender as global::Inventory.Controls.DataGrid;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_NewLabel(obj.NewLabel, DATA_CHANGED);
                                bindings.Update_Query(obj.Query, DATA_CHANGED);
                                bindings.Update_ToolbarMode(obj.ToolbarMode, DATA_CHANGED);
                                bindings.Update_ItemsSource(obj.ItemsSource, DATA_CHANGED);
                                bindings.Update_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                bindings.Update_SelectionMode(obj.SelectionMode, DATA_CHANGED);
                                bindings.Update_IsDataAvailable(obj.IsDataAvailable, DATA_CHANGED);
                                bindings.Update_DataUnavailableMessage(obj.DataUnavailableMessage, DATA_CHANGED);
                                bindings.Update_IsDataUnavailable(obj.IsDataUnavailable, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "NewLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NewLabel(obj.NewLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Query":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Query(obj.Query, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ToolbarMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ToolbarMode(obj.ToolbarMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ItemsSource":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ItemsSource(obj.ItemsSource, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectionMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SelectionMode(obj.SelectionMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDataAvailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsDataAvailable(obj.IsDataAvailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DataUnavailableMessage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DataUnavailableMessage(obj.DataUnavailableMessage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDataUnavailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsDataUnavailable(obj.IsDataUnavailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void DependencyPropertyChanged_NewLabel(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataGrid obj = sender as global::Inventory.Controls.DataGrid;
                        if (obj != null)
                        {
                            bindings.Update_NewLabel(obj.NewLabel, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_Query(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataGrid obj = sender as global::Inventory.Controls.DataGrid;
                        if (obj != null)
                        {
                            bindings.Update_Query(obj.Query, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_ItemsSource(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataGrid obj = sender as global::Inventory.Controls.DataGrid;
                        if (obj != null)
                        {
                            bindings.Update_ItemsSource(obj.ItemsSource, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_SelectedItem(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    DataGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Controls.DataGrid obj = sender as global::Inventory.Controls.DataGrid;
                        if (obj != null)
                        {
                            bindings.Update_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_NewLabel = 0;
                private long tokenDPC_Query = 0;
                private long tokenDPC_ItemsSource = 0;
                private long tokenDPC_SelectedItem = 0;
                public void UpdateChildListeners_(global::Inventory.Controls.DataGrid obj)
                {
                    DataGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.NewLabelProperty, tokenDPC_NewLabel);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.QueryProperty, tokenDPC_Query);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.ItemsSourceProperty, tokenDPC_ItemsSource);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.SelectedItemProperty, tokenDPC_SelectedItem);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                            tokenDPC_NewLabel = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.NewLabelProperty, DependencyPropertyChanged_NewLabel);
                            tokenDPC_Query = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.QueryProperty, DependencyPropertyChanged_Query);
                            tokenDPC_ItemsSource = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.ItemsSourceProperty, DependencyPropertyChanged_ItemsSource);
                            tokenDPC_SelectedItem = obj.RegisterPropertyChangedCallback(global::Inventory.Controls.DataGrid.SelectedItemProperty, DependencyPropertyChanged_SelectedItem);
                        }
                    }
                }
                public void RegisterTwoWayListener_2(global::Inventory.Controls.ListToolbar sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.ListToolbar.QueryProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_2_Query();
                        }
                    });
                }
                public void RegisterTwoWayListener_3(global::Inventory.Controls.AdaptiveGridView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Controls\DataGrid\DataGrid.xaml line 18
                {
                    global::Inventory.Controls.ListToolbar element2 = (global::Inventory.Controls.ListToolbar)(target);
                    ((global::Inventory.Controls.ListToolbar)element2).QuerySubmitted += this.OnQuerySubmitted;
                    ((global::Inventory.Controls.ListToolbar)element2).ButtonClick += this.OnToolbarClick;
                }
                break;
            case 3: // Controls\DataGrid\DataGrid.xaml line 27
                {
                    this.gridview = (global::Inventory.Controls.AdaptiveGridView)(target);
                    ((global::Inventory.Controls.AdaptiveGridView)this.gridview).SelectionChanged += this.OnSelectionChanged;
                    ((global::Inventory.Controls.AdaptiveGridView)this.gridview).DoubleTapped += this.OnDoubleTapped;
                    ((global::Inventory.Controls.AdaptiveGridView)this.gridview).ItemClick += this.OnItemClick;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Controls\DataGrid\DataGrid.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    DataGrid_obj1_Bindings bindings = new DataGrid_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

