#pragma checksum "C:\WH\InventorySample\src\Inventory.App\Views\Customers\List\CustomersList.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "004373AEBE0284101E824FB3E15ABFA94AE3FDD1F664FF876A666E2E80B32931"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Views
{
    partial class CustomersList : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Inventory_Controls_DataList_ItemsSource(global::Inventory.Controls.DataList obj, global::System.Collections.IEnumerable value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Collections.IEnumerable) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Collections.IEnumerable), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Inventory_Controls_DataList_ItemSecondaryActionInvokedCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.ItemSecondaryActionInvokedCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_SelectedItem(global::Inventory.Controls.DataList obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Inventory_Controls_DataList_IsMultipleSelection(global::Inventory.Controls.DataList obj, global::System.Boolean value)
            {
                obj.IsMultipleSelection = value;
            }
            public static void Set_Inventory_Controls_DataList_ItemsCount(global::Inventory.Controls.DataList obj, global::System.Int32 value)
            {
                obj.ItemsCount = value;
            }
            public static void Set_Inventory_Controls_DataList_NewCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.NewCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_RefreshCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.RefreshCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_QuerySubmittedCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.QuerySubmittedCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_Query(global::Inventory.Controls.DataList obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Query = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_DataList_StartSelectionCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.StartSelectionCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_CancelSelectionCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelSelectionCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_SelectItemsCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.SelectItemsCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_DeselectItemsCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.DeselectItemsCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_SelectRangesCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.SelectRangesCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_DeleteCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.DeleteCommand = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_PersonPicture_ProfilePicture(global::Windows.UI.Xaml.Controls.PersonPicture obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.ProfilePicture = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class CustomersList_obj3_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ICustomersList_Bindings
        {
            private global::Inventory.Models.CustomerModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj3;
            private global::Windows.UI.Xaml.Controls.Grid obj4;
            private global::Windows.UI.Xaml.Controls.TextBlock obj5;
            private global::Windows.UI.Xaml.Controls.TextBlock obj6;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Windows.UI.Xaml.Controls.TextBlock obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj9;
            private global::Windows.UI.Xaml.Controls.TextBlock obj10;
            private global::Windows.UI.Xaml.Controls.PersonPicture obj11;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj8TextDisabled = false;
            private static bool isobj9TextDisabled = false;
            private static bool isobj10TextDisabled = false;
            private static bool isobj11ProfilePictureDisabled = false;

            private CustomersList_obj3_BindingsTracking bindingsTracking;

            public CustomersList_obj3_Bindings()
            {
                this.bindingsTracking = new CustomersList_obj3_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 34 && columnNumber == 23)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 47 && columnNumber == 48)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 48)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 49 && columnNumber == 48)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 48)
                {
                    isobj8TextDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 48)
                {
                    isobj9TextDisabled = true;
                }
                else if (lineNumber == 52 && columnNumber == 48)
                {
                    isobj10TextDisabled = true;
                }
                else if (lineNumber == 45 && columnNumber == 40)
                {
                    isobj11ProfilePictureDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\Customers\List\CustomersList.xaml line 33
                        this.obj3 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 4: // Views\Customers\List\CustomersList.xaml line 34
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 5: // Views\Customers\List\CustomersList.xaml line 47
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 6: // Views\Customers\List\CustomersList.xaml line 48
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 7: // Views\Customers\List\CustomersList.xaml line 49
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 8: // Views\Customers\List\CustomersList.xaml line 50
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 9: // Views\Customers\List\CustomersList.xaml line 51
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 10: // Views\Customers\List\CustomersList.xaml line 52
                        this.obj10 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 11: // Views\Customers\List\CustomersList.xaml line 45
                        this.obj11 = (global::Windows.UI.Xaml.Controls.PersonPicture)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = 1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj3.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                    case 1:
                        global::Windows.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj11);
                        nextPhase = -1;
                        break;
                }
                this.Update_((global::Inventory.Models.CustomerModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
                global::Windows.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj11);
            }

            // ICustomersList_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Models.CustomerModel)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Models.CustomerModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_IsEmpty(obj.IsEmpty, phase);
                        this.Update_CustomerID(obj.CustomerID, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_FullName(obj.FullName, phase);
                        this.Update_EmailAddress(obj.EmailAddress, phase);
                        this.Update_Phone(obj.Phone, phase);
                        this.Update_AddressLine1(obj.AddressLine1, phase);
                        this.Update_CountryName(obj.CountryName, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0) | (1 << 1))) != 0)
                    {
                        this.Update_ThumbnailSource(obj.ThumbnailSource, phase);
                    }
                }
            }
            private void Update_IsEmpty(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 34
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("InverseBoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_CustomerID(global::System.Int64 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 47
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj.ToString(), null);
                    }
                }
            }
            private void Update_FullName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 48
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                }
            }
            private void Update_EmailAddress(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 49
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                    }
                }
            }
            private void Update_Phone(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 50
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj, null);
                    }
                }
            }
            private void Update_AddressLine1(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 51
                    if (!isobj9TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj9, obj, null);
                    }
                }
            }
            private void Update_CountryName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 52
                    if (!isobj10TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj10, obj, null);
                    }
                }
            }
            private void Update_ThumbnailSource(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 45
                    if (!isobj11ProfilePictureDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PersonPicture_ProfilePicture(this.obj11, (global::Windows.UI.Xaml.Media.ImageSource)this.LookupConverter("ObjectToImageConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.ImageSource), null, null), null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class CustomersList_obj3_BindingsTracking
            {
                private global::System.WeakReference<CustomersList_obj3_Bindings> weakRefToBindingObj; 

                public CustomersList_obj3_BindingsTracking(CustomersList_obj3_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<CustomersList_obj3_Bindings>(obj);
                }

                public CustomersList_obj3_Bindings TryGetBindingObject()
                {
                    CustomersList_obj3_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    CustomersList_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Models.CustomerModel obj = sender as global::Inventory.Models.CustomerModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_FullName(obj.FullName, DATA_CHANGED);
                                bindings.Update_EmailAddress(obj.EmailAddress, DATA_CHANGED);
                                bindings.Update_Phone(obj.Phone, DATA_CHANGED);
                                bindings.Update_AddressLine1(obj.AddressLine1, DATA_CHANGED);
                                bindings.Update_CountryName(obj.CountryName, DATA_CHANGED);
                                bindings.Update_ThumbnailSource(obj.ThumbnailSource, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "FullName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_FullName(obj.FullName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EmailAddress":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EmailAddress(obj.EmailAddress, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Phone":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Phone(obj.Phone, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AddressLine1":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddressLine1(obj.AddressLine1, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CountryName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CountryName(obj.CountryName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ThumbnailSource":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ThumbnailSource(obj.ThumbnailSource, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Inventory.Models.CustomerModel obj)
                {
                    CustomersList_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class CustomersList_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ICustomersList_Bindings
        {
            private global::Inventory.Views.CustomersList dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Inventory.Controls.DataList obj13;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj13ItemsSourceDisabled = false;
            private static bool isobj13ItemSecondaryActionInvokedCommandDisabled = false;
            private static bool isobj13SelectedItemDisabled = false;
            private static bool isobj13IsMultipleSelectionDisabled = false;
            private static bool isobj13ItemsCountDisabled = false;
            private static bool isobj13NewCommandDisabled = false;
            private static bool isobj13RefreshCommandDisabled = false;
            private static bool isobj13QueryDisabled = false;
            private static bool isobj13QuerySubmittedCommandDisabled = false;
            private static bool isobj13StartSelectionCommandDisabled = false;
            private static bool isobj13CancelSelectionCommandDisabled = false;
            private static bool isobj13SelectItemsCommandDisabled = false;
            private static bool isobj13DeselectItemsCommandDisabled = false;
            private static bool isobj13SelectRangesCommandDisabled = false;
            private static bool isobj13DeleteCommandDisabled = false;

            private CustomersList_obj1_BindingsTracking bindingsTracking;

            public CustomersList_obj1_Bindings()
            {
                this.bindingsTracking = new CustomersList_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 58 && columnNumber == 24)
                {
                    isobj13ItemsSourceDisabled = true;
                }
                else if (lineNumber == 59 && columnNumber == 24)
                {
                    isobj13ItemSecondaryActionInvokedCommandDisabled = true;
                }
                else if (lineNumber == 61 && columnNumber == 24)
                {
                    isobj13SelectedItemDisabled = true;
                }
                else if (lineNumber == 64 && columnNumber == 24)
                {
                    isobj13IsMultipleSelectionDisabled = true;
                }
                else if (lineNumber == 65 && columnNumber == 24)
                {
                    isobj13ItemsCountDisabled = true;
                }
                else if (lineNumber == 66 && columnNumber == 24)
                {
                    isobj13NewCommandDisabled = true;
                }
                else if (lineNumber == 67 && columnNumber == 24)
                {
                    isobj13RefreshCommandDisabled = true;
                }
                else if (lineNumber == 68 && columnNumber == 24)
                {
                    isobj13QueryDisabled = true;
                }
                else if (lineNumber == 69 && columnNumber == 24)
                {
                    isobj13QuerySubmittedCommandDisabled = true;
                }
                else if (lineNumber == 70 && columnNumber == 24)
                {
                    isobj13StartSelectionCommandDisabled = true;
                }
                else if (lineNumber == 71 && columnNumber == 24)
                {
                    isobj13CancelSelectionCommandDisabled = true;
                }
                else if (lineNumber == 72 && columnNumber == 24)
                {
                    isobj13SelectItemsCommandDisabled = true;
                }
                else if (lineNumber == 73 && columnNumber == 24)
                {
                    isobj13DeselectItemsCommandDisabled = true;
                }
                else if (lineNumber == 74 && columnNumber == 24)
                {
                    isobj13SelectRangesCommandDisabled = true;
                }
                else if (lineNumber == 75 && columnNumber == 24)
                {
                    isobj13DeleteCommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 13: // Views\Customers\List\CustomersList.xaml line 58
                        this.obj13 = (global::Inventory.Controls.DataList)target;
                        this.bindingsTracking.RegisterTwoWayListener_13(this.obj13);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ICustomersList_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Views.CustomersList)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Views.CustomersList obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::Inventory.ViewModels.CustomerListViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Items(obj.Items, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OpenInNewViewCommand(obj.OpenInNewViewCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedItem(obj.SelectedItem, phase);
                        this.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, phase);
                        this.Update_ViewModel_ItemsCount(obj.ItemsCount, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NewCommand(obj.NewCommand, phase);
                        this.Update_ViewModel_RefreshCommand(obj.RefreshCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Query(obj.Query, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_StartSelectionCommand(obj.StartSelectionCommand, phase);
                        this.Update_ViewModel_CancelSelectionCommand(obj.CancelSelectionCommand, phase);
                        this.Update_ViewModel_SelectItemsCommand(obj.SelectItemsCommand, phase);
                        this.Update_ViewModel_DeselectItemsCommand(obj.DeselectItemsCommand, phase);
                        this.Update_ViewModel_SelectRangesCommand(obj.SelectRangesCommand, phase);
                        this.Update_ViewModel_DeleteSelectionCommand(obj.DeleteSelectionCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_Items(global::System.Collections.Generic.IList<global::Inventory.Models.CustomerModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_ItemsSource(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_OpenInNewViewCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13ItemSecondaryActionInvokedCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_ItemSecondaryActionInvokedCommand(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedItem(global::Inventory.Models.CustomerModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedItem(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_SelectedItem(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsMultipleSelection(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13IsMultipleSelectionDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_IsMultipleSelection(this.obj13, obj);
                    }
                }
            }
            private void Update_ViewModel_ItemsCount(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13ItemsCountDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_ItemsCount(this.obj13, obj);
                    }
                }
            }
            private void Update_ViewModel_NewCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13NewCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_NewCommand(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_RefreshCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13RefreshCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_RefreshCommand(this.obj13, obj, null);
                    }
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13QuerySubmittedCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_QuerySubmittedCommand(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Query(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13QueryDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_Query(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_StartSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13StartSelectionCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_StartSelectionCommand(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CancelSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13CancelSelectionCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_CancelSelectionCommand(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectItemsCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13SelectItemsCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_SelectItemsCommand(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeselectItemsCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13DeselectItemsCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_DeselectItemsCommand(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectRangesCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13SelectRangesCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_SelectRangesCommand(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeleteSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\List\CustomersList.xaml line 58
                    if (!isobj13DeleteCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_DeleteCommand(this.obj13, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_13_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedItem = (global::Inventory.Models.CustomerModel)this.obj13.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_13_IsMultipleSelection()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.IsMultipleSelection = this.obj13.IsMultipleSelection;
                        }
                    }
                }
            }
            private void UpdateTwoWay_13_Query()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Query = this.obj13.Query;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class CustomersList_obj1_BindingsTracking
            {
                private global::System.WeakReference<CustomersList_obj1_Bindings> weakRefToBindingObj; 

                public CustomersList_obj1_BindingsTracking(CustomersList_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<CustomersList_obj1_Bindings>(obj);
                }

                public CustomersList_obj1_Bindings TryGetBindingObject()
                {
                    CustomersList_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_SelectedItem(null);
                }

                public void DependencyPropertyChanged_ViewModel(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    CustomersList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Views.CustomersList obj = sender as global::Inventory.Views.CustomersList;
                        if (obj != null)
                        {
                            bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_ViewModel = 0;
                public void UpdateChildListeners_(global::Inventory.Views.CustomersList obj)
                {
                    CustomersList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Views.CustomersList.ViewModelProperty, tokenDPC_ViewModel);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_ViewModel = obj.RegisterPropertyChangedCallback(global::Inventory.Views.CustomersList.ViewModelProperty, DependencyPropertyChanged_ViewModel);
                        }
                    }
                }
                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    CustomersList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.CustomerListViewModel obj = sender as global::Inventory.ViewModels.CustomerListViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                bindings.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                bindings.Update_ViewModel_ItemsCount(obj.ItemsCount, DATA_CHANGED);
                                bindings.Update_ViewModel_Query(obj.Query, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Items":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsMultipleSelection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ItemsCount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ItemsCount(obj.ItemsCount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Query":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Query(obj.Query, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.ViewModels.CustomerListViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Inventory.ViewModels.CustomerListViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SelectedItem(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    CustomersList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Models.CustomerModel obj = sender as global::Inventory.Models.CustomerModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.Models.CustomerModel cache_ViewModel_SelectedItem = null;
                public void UpdateChildListeners_ViewModel_SelectedItem(global::Inventory.Models.CustomerModel obj)
                {
                    if (obj != cache_ViewModel_SelectedItem)
                    {
                        if (cache_ViewModel_SelectedItem != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedItem).PropertyChanged -= PropertyChanged_ViewModel_SelectedItem;
                            cache_ViewModel_SelectedItem = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedItem = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedItem;
                        }
                    }
                }
                public void RegisterTwoWayListener_13(global::Inventory.Controls.DataList sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_13_SelectedItem();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.IsMultipleSelectionProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_13_IsMultipleSelection();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.QueryProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_13_Query();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Customers\List\CustomersList.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    CustomersList_obj1_Bindings bindings = new CustomersList_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 3: // Views\Customers\List\CustomersList.xaml line 33
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element3 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    CustomersList_obj3_Bindings bindings = new CustomersList_obj3_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element3.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element3.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element3, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element3, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

