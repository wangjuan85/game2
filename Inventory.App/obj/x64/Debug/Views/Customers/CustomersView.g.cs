#pragma checksum "C:\WH\InventorySample\src\Inventory.App\Views\Customers\CustomersView.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "1837B78AA31EE8D9C15AC9A69E6A02691C2E02D6685E8867285A6099D9525738"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Views
{
    partial class CustomersView : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Inventory_Views_CustomersList_ViewModel(global::Inventory.Views.CustomersList obj, global::Inventory.ViewModels.CustomerListViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.CustomerListViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.CustomerListViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Inventory_Controls_WindowTitle_Title(global::Inventory.Controls.WindowTitle obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Title = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_Section_Header(global::Inventory.Controls.Section obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Header = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Grid_RowSpan(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Int32 value)
            {
                global::Windows.UI.Xaml.Controls.Grid.SetRowSpan(obj, value);
            }
            public static void Set_Inventory_Views_CustomersDetails_ViewModel(global::Inventory.Views.CustomersDetails obj, global::Inventory.ViewModels.CustomerDetailsViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.CustomerDetailsViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.CustomerDetailsViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Inventory_Views_CustomersOrders_ViewModel(global::Inventory.Views.CustomersOrders obj, global::Inventory.ViewModels.OrderListViewModel value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Inventory.ViewModels.OrderListViewModel) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Inventory.ViewModels.OrderListViewModel), targetNullValue);
                }
                obj.ViewModel = value;
            }
            public static void Set_Inventory_Controls_Section_IsButtonVisible(global::Inventory.Controls.Section obj, global::System.Boolean value)
            {
                obj.IsButtonVisible = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class CustomersView_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ICustomersView_Bindings
        {
            private global::Inventory.Views.CustomersView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Inventory.Controls.WindowTitle obj3;
            private global::Windows.UI.Xaml.Controls.Grid obj4;
            private global::Windows.UI.Xaml.Controls.Grid obj5;
            private global::Inventory.Controls.Section obj6;
            private global::Inventory.Controls.Section obj7;
            private global::Inventory.Views.CustomersOrders obj9;
            private global::Inventory.Views.CustomersDetails obj10;
            private global::Inventory.Controls.Section obj11;
            private global::Inventory.Views.CustomersList obj12;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3TitleDisabled = false;
            private static bool isobj4RowSpanDisabled = false;
            private static bool isobj5VisibilityDisabled = false;
            private static bool isobj6IsEnabledDisabled = false;
            private static bool isobj6VisibilityDisabled = false;
            private static bool isobj7VisibilityDisabled = false;
            private static bool isobj9ViewModelDisabled = false;
            private static bool isobj10ViewModelDisabled = false;
            private static bool isobj11HeaderDisabled = false;
            private static bool isobj11IsButtonVisibleDisabled = false;
            private static bool isobj12ViewModelDisabled = false;

            private CustomersView_obj1_BindingsTracking bindingsTracking;

            public CustomersView_obj1_Bindings()
            {
                this.bindingsTracking = new CustomersView_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 23 && columnNumber == 50)
                {
                    isobj3TitleDisabled = true;
                }
                else if (lineNumber == 32 && columnNumber == 19)
                {
                    isobj4RowSpanDisabled = true;
                }
                else if (lineNumber == 46 && columnNumber == 19)
                {
                    isobj5VisibilityDisabled = true;
                }
                else if (lineNumber == 47 && columnNumber == 35)
                {
                    isobj6IsEnabledDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 35)
                {
                    isobj6VisibilityDisabled = true;
                }
                else if (lineNumber == 65 && columnNumber == 35)
                {
                    isobj7VisibilityDisabled = true;
                }
                else if (lineNumber == 58 && columnNumber == 52)
                {
                    isobj9ViewModelDisabled = true;
                }
                else if (lineNumber == 55 && columnNumber == 53)
                {
                    isobj10ViewModelDisabled = true;
                }
                else if (lineNumber == 33 && columnNumber == 35)
                {
                    isobj11HeaderDisabled = true;
                }
                else if (lineNumber == 37 && columnNumber == 35)
                {
                    isobj11IsButtonVisibleDisabled = true;
                }
                else if (lineNumber == 38 && columnNumber == 42)
                {
                    isobj12ViewModelDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\Customers\CustomersView.xaml line 23
                        this.obj3 = (global::Inventory.Controls.WindowTitle)target;
                        break;
                    case 4: // Views\Customers\CustomersView.xaml line 32
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 5: // Views\Customers\CustomersView.xaml line 43
                        this.obj5 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 6: // Views\Customers\CustomersView.xaml line 47
                        this.obj6 = (global::Inventory.Controls.Section)target;
                        break;
                    case 7: // Views\Customers\CustomersView.xaml line 64
                        this.obj7 = (global::Inventory.Controls.Section)target;
                        break;
                    case 9: // Views\Customers\CustomersView.xaml line 58
                        this.obj9 = (global::Inventory.Views.CustomersOrders)target;
                        break;
                    case 10: // Views\Customers\CustomersView.xaml line 55
                        this.obj10 = (global::Inventory.Views.CustomersDetails)target;
                        break;
                    case 11: // Views\Customers\CustomersView.xaml line 33
                        this.obj11 = (global::Inventory.Controls.Section)target;
                        break;
                    case 12: // Views\Customers\CustomersView.xaml line 38
                        this.obj12 = (global::Inventory.Views.CustomersList)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ICustomersView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Views.CustomersView)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            private bool TryGet_ViewModel_CustomerList_IsMultipleSelection(out global::System.Boolean val)
            {
                global::Inventory.ViewModels.CustomerListViewModel obj;
                if (TryGet_ViewModel_CustomerList(out obj) && obj != null)
                {
                    val = obj.IsMultipleSelection;
                    return true;
                }
                else
                {
                    val = default(global::System.Boolean);
                    return false;
                }
            }

            private bool TryGet_ViewModel_CustomerList(out global::Inventory.ViewModels.CustomerListViewModel val)
            {
                global::Inventory.ViewModels.CustomersViewModel obj;
                if (TryGet_ViewModel(out obj) && obj != null)
                {
                    val = obj.CustomerList;
                    return true;
                }
                else
                {
                    val = default(global::Inventory.ViewModels.CustomerListViewModel);
                    return false;
                }
            }

            private bool TryGet_ViewModel(out global::Inventory.ViewModels.CustomersViewModel val)
            {
                global::Inventory.Views.CustomersView obj;
                if (TryGet_(out obj) && obj != null)
                {
                    val = obj.ViewModel;
                    return true;
                }
                else
                {
                    val = default(global::Inventory.ViewModels.CustomersViewModel);
                    return false;
                }
            }

            private bool TryGet_(out global::Inventory.Views.CustomersView val)
            {
                val = this.dataRoot;
                return true;
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_M_GetRowSpan_1215416956(int phase)
            {
                global::System.Boolean p0;
                if (!TryGet_ViewModel_CustomerList_IsMultipleSelection(out p0)) { return; }
                global::System.Int32 result = this.dataRoot.GetRowSpan(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 32
                    if (!isobj4RowSpanDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Grid_RowSpan(this.obj4, result);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Views.CustomersView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                        this.Update_M_GetRowSpan_1215416956(phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update_ViewModel(global::Inventory.ViewModels.CustomersViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CustomerList(obj.CustomerList, phase);
                        this.Update_ViewModel_CustomerDetails(obj.CustomerDetails, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CustomerOrders(obj.CustomerOrders, phase);
                        this.Update_ViewModel_IsMainView(obj.IsMainView, phase);
                    }
                }
            }
            private void Update_ViewModel_CustomerList(global::Inventory.ViewModels.CustomerListViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_CustomerList(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CustomerList_Title(obj.Title, phase);
                        this.Update_ViewModel_CustomerList_IsMultipleSelection(obj.IsMultipleSelection, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 38
                    if (!isobj12ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_CustomersList_ViewModel(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CustomerList_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 23
                    if (!isobj3TitleDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_WindowTitle_Title(this.obj3, obj, null);
                    }
                    // Views\Customers\CustomersView.xaml line 33
                    if (!isobj11HeaderDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_Section_Header(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CustomerList_IsMultipleSelection(global::System.Boolean obj, int phase)
            {
                this.Update_M_GetRowSpan_1215416956(phase);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 43
                    if (!isobj5VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj5, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("InverseBoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_M_GetRowSpan_1215416956(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (!isobj4RowSpanDisabled)
                    {
                        this.PendingFunctionBindings["M_GetRowSpan_1215416956"] = new InvokeFunctionDelegate(this.Invoke_M_GetRowSpan_1215416956); 
                    }
                }
            }
            private void Update_ViewModel_CustomerDetails(global::Inventory.ViewModels.CustomerDetailsViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_CustomerDetails(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CustomerDetails_IsEnabled(obj.IsEnabled, phase);
                        this.Update_ViewModel_CustomerDetails_IsDataAvailable(obj.IsDataAvailable, phase);
                        this.Update_ViewModel_CustomerDetails_IsDataUnavailable(obj.IsDataUnavailable, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 55
                    if (!isobj10ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_CustomersDetails_ViewModel(this.obj10, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CustomerDetails_IsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 47
                    if (!isobj6IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj6, obj);
                    }
                }
            }
            private void Update_ViewModel_CustomerDetails_IsDataAvailable(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_CustomerDetails_IsDataAvailable_Cast_IsDataAvailable_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ViewModel_CustomerDetails_IsDataAvailable_Cast_IsDataAvailable_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 47
                    if (!isobj6VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj6, obj);
                    }
                }
            }
            private void Update_ViewModel_CustomerDetails_IsDataUnavailable(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_CustomerDetails_IsDataUnavailable_Cast_IsDataUnavailable_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ViewModel_CustomerDetails_IsDataUnavailable_Cast_IsDataUnavailable_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 64
                    if (!isobj7VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, obj);
                    }
                }
            }
            private void Update_ViewModel_CustomerOrders(global::Inventory.ViewModels.OrderListViewModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 58
                    if (!isobj9ViewModelDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_CustomersOrders_ViewModel(this.obj9, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsMainView(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Customers\CustomersView.xaml line 33
                    if (!isobj11IsButtonVisibleDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_Section_IsButtonVisible(this.obj11, obj);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class CustomersView_obj1_BindingsTracking
            {
                private global::System.WeakReference<CustomersView_obj1_Bindings> weakRefToBindingObj; 

                public CustomersView_obj1_BindingsTracking(CustomersView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<CustomersView_obj1_Bindings>(obj);
                }

                public CustomersView_obj1_Bindings TryGetBindingObject()
                {
                    CustomersView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_CustomerList(null);
                    UpdateChildListeners_ViewModel_CustomerDetails(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    CustomersView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.CustomersViewModel obj = sender as global::Inventory.ViewModels.CustomersViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_CustomerList(obj.CustomerList, DATA_CHANGED);
                                bindings.Update_ViewModel_CustomerDetails(obj.CustomerDetails, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CustomerList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerList(obj.CustomerList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CustomerDetails":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerDetails(obj.CustomerDetails, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.ViewModels.CustomersViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Inventory.ViewModels.CustomersViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_CustomerList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    CustomersView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.CustomerListViewModel obj = sender as global::Inventory.ViewModels.CustomerListViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_CustomerList_Title(obj.Title, DATA_CHANGED);
                                bindings.Update_ViewModel_CustomerList_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerList_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsMultipleSelection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerList_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.ViewModels.CustomerListViewModel cache_ViewModel_CustomerList = null;
                public void UpdateChildListeners_ViewModel_CustomerList(global::Inventory.ViewModels.CustomerListViewModel obj)
                {
                    if (obj != cache_ViewModel_CustomerList)
                    {
                        if (cache_ViewModel_CustomerList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_CustomerList).PropertyChanged -= PropertyChanged_ViewModel_CustomerList;
                            cache_ViewModel_CustomerList = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_CustomerList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_CustomerList;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_CustomerDetails(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    CustomersView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.CustomerDetailsViewModel obj = sender as global::Inventory.ViewModels.CustomerDetailsViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_CustomerDetails_IsEnabled(obj.IsEnabled, DATA_CHANGED);
                                bindings.Update_ViewModel_CustomerDetails_IsDataAvailable(obj.IsDataAvailable, DATA_CHANGED);
                                bindings.Update_ViewModel_CustomerDetails_IsDataUnavailable(obj.IsDataUnavailable, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerDetails_IsEnabled(obj.IsEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDataAvailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerDetails_IsDataAvailable(obj.IsDataAvailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDataUnavailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CustomerDetails_IsDataUnavailable(obj.IsDataUnavailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Inventory.ViewModels.CustomerDetailsViewModel cache_ViewModel_CustomerDetails = null;
                public void UpdateChildListeners_ViewModel_CustomerDetails(global::Inventory.ViewModels.CustomerDetailsViewModel obj)
                {
                    if (obj != cache_ViewModel_CustomerDetails)
                    {
                        if (cache_ViewModel_CustomerDetails != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_CustomerDetails).PropertyChanged -= PropertyChanged_ViewModel_CustomerDetails;
                            cache_ViewModel_CustomerDetails = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_CustomerDetails = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_CustomerDetails;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 6: // Views\Customers\CustomersView.xaml line 47
                {
                    global::Inventory.Controls.Section element6 = (global::Inventory.Controls.Section)(target);
                    ((global::Inventory.Controls.Section)element6).HeaderButtonClick += this.OpenDetailsInNewView;
                }
                break;
            case 8: // Views\Customers\CustomersView.xaml line 53
                {
                    this.pivot = (global::Windows.UI.Xaml.Controls.Pivot)(target);
                }
                break;
            case 11: // Views\Customers\CustomersView.xaml line 33
                {
                    global::Inventory.Controls.Section element11 = (global::Inventory.Controls.Section)(target);
                    ((global::Inventory.Controls.Section)element11).HeaderButtonClick += this.OpenInNewView;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Customers\CustomersView.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    CustomersView_obj1_Bindings bindings = new CustomersView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

