#pragma checksum "C:\WH\InventorySample\src\Inventory.App\Views\AppLogs\List\AppLogsList.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "4F4ED1253F56D750D4F3E3394B86355F2299AF79A533957C8695D20D0030C6A7"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Views
{
    partial class AppLogsList : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Inventory_Controls_DataList_ItemsSource(global::Inventory.Controls.DataList obj, global::System.Collections.IEnumerable value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Collections.IEnumerable) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Collections.IEnumerable), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Inventory_Controls_DataList_SelectedItem(global::Inventory.Controls.DataList obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Inventory_Controls_DataList_IsMultipleSelection(global::Inventory.Controls.DataList obj, global::System.Boolean value)
            {
                obj.IsMultipleSelection = value;
            }
            public static void Set_Inventory_Controls_DataList_ItemsCount(global::Inventory.Controls.DataList obj, global::System.Int32 value)
            {
                obj.ItemsCount = value;
            }
            public static void Set_Inventory_Controls_DataList_RefreshCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.RefreshCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_QuerySubmittedCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.QuerySubmittedCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_Query(global::Inventory.Controls.DataList obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Query = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Controls_DataList_StartSelectionCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.StartSelectionCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_CancelSelectionCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelSelectionCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_SelectItemsCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.SelectItemsCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_DeselectItemsCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.DeselectItemsCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_SelectRangesCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.SelectRangesCommand = value;
            }
            public static void Set_Inventory_Controls_DataList_DeleteCommand(global::Inventory.Controls.DataList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.DeleteCommand = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_FontIcon_Glyph(global::Windows.UI.Xaml.Controls.FontIcon obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Glyph = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_IconElement_Foreground(global::Windows.UI.Xaml.Controls.IconElement obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class AppLogsList_obj3_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IAppLogsList_Bindings
        {
            private global::Inventory.Models.AppLogModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj3;
            private global::Windows.UI.Xaml.Controls.Grid obj4;
            private global::Windows.UI.Xaml.Controls.FontIcon obj5;
            private global::Windows.UI.Xaml.Controls.TextBlock obj6;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Windows.UI.Xaml.Controls.TextBlock obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj9;
            private global::Windows.UI.Xaml.Controls.TextBlock obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj5GlyphDisabled = false;
            private static bool isobj5ForegroundDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj8TextDisabled = false;
            private static bool isobj9TextDisabled = false;
            private static bool isobj10TextDisabled = false;
            private static bool isobj11TextDisabled = false;
            private static bool isobj12TextDisabled = false;
            private static bool isobj13TextDisabled = false;

            public AppLogsList_obj3_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 38 && columnNumber == 23)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 31)
                {
                    isobj5GlyphDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 98)
                {
                    isobj5ForegroundDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 48)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 52 && columnNumber == 48)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 48)
                {
                    isobj8TextDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 48)
                {
                    isobj9TextDisabled = true;
                }
                else if (lineNumber == 55 && columnNumber == 48)
                {
                    isobj10TextDisabled = true;
                }
                else if (lineNumber == 56 && columnNumber == 48)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 48)
                {
                    isobj12TextDisabled = true;
                }
                else if (lineNumber == 58 && columnNumber == 48)
                {
                    isobj13TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\AppLogs\List\AppLogsList.xaml line 37
                        this.obj3 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 4: // Views\AppLogs\List\AppLogsList.xaml line 38
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 5: // Views\AppLogs\List\AppLogsList.xaml line 50
                        this.obj5 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 6: // Views\AppLogs\List\AppLogsList.xaml line 51
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 7: // Views\AppLogs\List\AppLogsList.xaml line 52
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 8: // Views\AppLogs\List\AppLogsList.xaml line 53
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 9: // Views\AppLogs\List\AppLogsList.xaml line 54
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 10: // Views\AppLogs\List\AppLogsList.xaml line 55
                        this.obj10 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 11: // Views\AppLogs\List\AppLogsList.xaml line 56
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12: // Views\AppLogs\List\AppLogsList.xaml line 57
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 13: // Views\AppLogs\List\AppLogsList.xaml line 58
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj3.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Inventory.Models.AppLogModel) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IAppLogsList_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Models.AppLogModel)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Models.AppLogModel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_IsEmpty(obj.IsEmpty, phase);
                        this.Update_Type(obj.Type, phase);
                        this.Update_Id(obj.Id, phase);
                        this.Update_DateTime(obj.DateTime, phase);
                        this.Update_User(obj.User, phase);
                        this.Update_Source(obj.Source, phase);
                        this.Update_Action(obj.Action, phase);
                        this.Update_Message(obj.Message, phase);
                    }
                }
            }
            private void Update_IsEmpty(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 38
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("InverseBoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_Type(global::Inventory.Data.LogType obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 50
                    if (!isobj5GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_FontIcon_Glyph(this.obj5, (global::System.String)this.LookupConverter("LogTypeConverter").Convert(obj, typeof(global::System.String), null, null), null);
                    }
                    // Views\AppLogs\List\AppLogsList.xaml line 50
                    if (!isobj5ForegroundDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj5, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("LogTypeConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    }
                    // Views\AppLogs\List\AppLogsList.xaml line 51
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj.ToString(), null);
                    }
                }
            }
            private void Update_Id(global::System.Int64 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 52
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj.ToString(), null);
                    }
                }
            }
            private void Update_DateTime(global::System.DateTimeOffset obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 53
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj8, (global::System.String)this.LookupConverter("DateTimeFormatConverter").Convert(obj, typeof(global::System.String), null, null), null);
                    }
                    // Views\AppLogs\List\AppLogsList.xaml line 54
                    if (!isobj9TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj9, (global::System.String)this.LookupConverter("DateTimeFormatConverter").Convert(obj, typeof(global::System.String), "longtime", null), null);
                    }
                }
            }
            private void Update_User(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 55
                    if (!isobj10TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj10, obj, null);
                    }
                }
            }
            private void Update_Source(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 56
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_Action(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 57
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                    }
                }
            }
            private void Update_Message(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 58
                    if (!isobj13TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class AppLogsList_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IAppLogsList_Bindings
        {
            private global::Inventory.Views.AppLogsList dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Inventory.Controls.DataList obj15;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj15ItemsSourceDisabled = false;
            private static bool isobj15SelectedItemDisabled = false;
            private static bool isobj15IsMultipleSelectionDisabled = false;
            private static bool isobj15ItemsCountDisabled = false;
            private static bool isobj15RefreshCommandDisabled = false;
            private static bool isobj15QueryDisabled = false;
            private static bool isobj15QuerySubmittedCommandDisabled = false;
            private static bool isobj15StartSelectionCommandDisabled = false;
            private static bool isobj15CancelSelectionCommandDisabled = false;
            private static bool isobj15SelectItemsCommandDisabled = false;
            private static bool isobj15DeselectItemsCommandDisabled = false;
            private static bool isobj15SelectRangesCommandDisabled = false;
            private static bool isobj15DeleteCommandDisabled = false;

            private AppLogsList_obj1_BindingsTracking bindingsTracking;

            public AppLogsList_obj1_Bindings()
            {
                this.bindingsTracking = new AppLogsList_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 65 && columnNumber == 24)
                {
                    isobj15ItemsSourceDisabled = true;
                }
                else if (lineNumber == 66 && columnNumber == 24)
                {
                    isobj15SelectedItemDisabled = true;
                }
                else if (lineNumber == 69 && columnNumber == 24)
                {
                    isobj15IsMultipleSelectionDisabled = true;
                }
                else if (lineNumber == 70 && columnNumber == 24)
                {
                    isobj15ItemsCountDisabled = true;
                }
                else if (lineNumber == 71 && columnNumber == 24)
                {
                    isobj15RefreshCommandDisabled = true;
                }
                else if (lineNumber == 72 && columnNumber == 24)
                {
                    isobj15QueryDisabled = true;
                }
                else if (lineNumber == 73 && columnNumber == 24)
                {
                    isobj15QuerySubmittedCommandDisabled = true;
                }
                else if (lineNumber == 74 && columnNumber == 24)
                {
                    isobj15StartSelectionCommandDisabled = true;
                }
                else if (lineNumber == 75 && columnNumber == 24)
                {
                    isobj15CancelSelectionCommandDisabled = true;
                }
                else if (lineNumber == 76 && columnNumber == 24)
                {
                    isobj15SelectItemsCommandDisabled = true;
                }
                else if (lineNumber == 77 && columnNumber == 24)
                {
                    isobj15DeselectItemsCommandDisabled = true;
                }
                else if (lineNumber == 78 && columnNumber == 24)
                {
                    isobj15SelectRangesCommandDisabled = true;
                }
                else if (lineNumber == 79 && columnNumber == 24)
                {
                    isobj15DeleteCommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 15: // Views\AppLogs\List\AppLogsList.xaml line 64
                        this.obj15 = (global::Inventory.Controls.DataList)target;
                        this.bindingsTracking.RegisterTwoWayListener_15(this.obj15);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IAppLogsList_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Views.AppLogsList)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Views.AppLogsList obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::Inventory.ViewModels.AppLogListViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Items(obj.Items, phase);
                        this.Update_ViewModel_SelectedItem(obj.SelectedItem, phase);
                        this.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, phase);
                        this.Update_ViewModel_ItemsCount(obj.ItemsCount, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_RefreshCommand(obj.RefreshCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Query(obj.Query, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_StartSelectionCommand(obj.StartSelectionCommand, phase);
                        this.Update_ViewModel_CancelSelectionCommand(obj.CancelSelectionCommand, phase);
                        this.Update_ViewModel_SelectItemsCommand(obj.SelectItemsCommand, phase);
                        this.Update_ViewModel_DeselectItemsCommand(obj.DeselectItemsCommand, phase);
                        this.Update_ViewModel_SelectRangesCommand(obj.SelectRangesCommand, phase);
                        this.Update_ViewModel_DeleteSelectionCommand(obj.DeleteSelectionCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_Items(global::System.Collections.Generic.IList<global::Inventory.Models.AppLogModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_ItemsSource(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedItem(global::Inventory.Models.AppLogModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedItem(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_SelectedItem(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsMultipleSelection(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15IsMultipleSelectionDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_IsMultipleSelection(this.obj15, obj);
                    }
                }
            }
            private void Update_ViewModel_ItemsCount(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15ItemsCountDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_ItemsCount(this.obj15, obj);
                    }
                }
            }
            private void Update_ViewModel_RefreshCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15RefreshCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_RefreshCommand(this.obj15, obj, null);
                    }
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15QuerySubmittedCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_QuerySubmittedCommand(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Query(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15QueryDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_Query(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_StartSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15StartSelectionCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_StartSelectionCommand(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CancelSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15CancelSelectionCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_CancelSelectionCommand(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectItemsCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15SelectItemsCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_SelectItemsCommand(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeselectItemsCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15DeselectItemsCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_DeselectItemsCommand(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectRangesCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15SelectRangesCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_SelectRangesCommand(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeleteSelectionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AppLogs\List\AppLogsList.xaml line 64
                    if (!isobj15DeleteCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Controls_DataList_DeleteCommand(this.obj15, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_15_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedItem = (global::Inventory.Models.AppLogModel)this.obj15.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_15_IsMultipleSelection()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.IsMultipleSelection = this.obj15.IsMultipleSelection;
                        }
                    }
                }
            }
            private void UpdateTwoWay_15_Query()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Query = this.obj15.Query;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class AppLogsList_obj1_BindingsTracking
            {
                private global::System.WeakReference<AppLogsList_obj1_Bindings> weakRefToBindingObj; 

                public AppLogsList_obj1_BindingsTracking(AppLogsList_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<AppLogsList_obj1_Bindings>(obj);
                }

                public AppLogsList_obj1_Bindings TryGetBindingObject()
                {
                    AppLogsList_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_SelectedItem(null);
                }

                public void DependencyPropertyChanged_ViewModel(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    AppLogsList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Inventory.Views.AppLogsList obj = sender as global::Inventory.Views.AppLogsList;
                        if (obj != null)
                        {
                            bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_ViewModel = 0;
                public void UpdateChildListeners_(global::Inventory.Views.AppLogsList obj)
                {
                    AppLogsList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Inventory.Views.AppLogsList.ViewModelProperty, tokenDPC_ViewModel);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_ViewModel = obj.RegisterPropertyChangedCallback(global::Inventory.Views.AppLogsList.ViewModelProperty, DependencyPropertyChanged_ViewModel);
                        }
                    }
                }
                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AppLogsList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.AppLogListViewModel obj = sender as global::Inventory.ViewModels.AppLogListViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                bindings.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                bindings.Update_ViewModel_ItemsCount(obj.ItemsCount, DATA_CHANGED);
                                bindings.Update_ViewModel_Query(obj.Query, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Items":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsMultipleSelection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsMultipleSelection(obj.IsMultipleSelection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ItemsCount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ItemsCount(obj.ItemsCount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Query":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Query(obj.Query, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.ViewModels.AppLogListViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Inventory.ViewModels.AppLogListViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SelectedItem(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AppLogsList_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.Models.AppLogModel obj = sender as global::Inventory.Models.AppLogModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.Models.AppLogModel cache_ViewModel_SelectedItem = null;
                public void UpdateChildListeners_ViewModel_SelectedItem(global::Inventory.Models.AppLogModel obj)
                {
                    if (obj != cache_ViewModel_SelectedItem)
                    {
                        if (cache_ViewModel_SelectedItem != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedItem).PropertyChanged -= PropertyChanged_ViewModel_SelectedItem;
                            cache_ViewModel_SelectedItem = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedItem = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedItem;
                        }
                    }
                }
                public void RegisterTwoWayListener_15(global::Inventory.Controls.DataList sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_SelectedItem();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.IsMultipleSelectionProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_IsMultipleSelection();
                        }
                    });
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Controls.DataList.QueryProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_Query();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\AppLogs\List\AppLogsList.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    AppLogsList_obj1_Bindings bindings = new AppLogsList_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 3: // Views\AppLogs\List\AppLogsList.xaml line 37
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element3 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    AppLogsList_obj3_Bindings bindings = new AppLogsList_obj3_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element3.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element3.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element3, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element3, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

