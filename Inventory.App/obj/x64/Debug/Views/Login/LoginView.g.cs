#pragma checksum "C:\WH\InventorySample\src\Inventory.App\Views\Login\LoginView.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "06F464BC8D383B5DBC27B4BAD70A54300A0BF3D8152BA0311F445739ED32ED5D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Views
{
    partial class LoginView : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Inventory_Views_NamePasswordControl_UserName(global::Inventory.Views.NamePasswordControl obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.UserName = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Views_WindowsHelloControl_UserName(global::Inventory.Views.WindowsHelloControl obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.UserName = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Views_NamePasswordControl_Password(global::Inventory.Views.NamePasswordControl obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Password = value ?? global::System.String.Empty;
            }
            public static void Set_Inventory_Views_NamePasswordControl_LoginWithPasswordCommand(global::Inventory.Views.NamePasswordControl obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.LoginWithPasswordCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Inventory_Views_WindowsHelloControl_LoginWithWindowHelloCommand(global::Inventory.Views.WindowsHelloControl obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.LoginWithWindowHelloCommand = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class LoginView_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ILoginView_Bindings
        {
            private global::Inventory.Views.LoginView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.HyperlinkButton obj3;
            private global::Inventory.Views.NamePasswordControl obj6;
            private global::Inventory.Views.WindowsHelloControl obj7;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj3CommandDisabled = false;
            private static bool isobj6UserNameDisabled = false;
            private static bool isobj6PasswordDisabled = false;
            private static bool isobj6LoginWithPasswordCommandDisabled = false;
            private static bool isobj6VisibilityDisabled = false;
            private static bool isobj6IsEnabledDisabled = false;
            private static bool isobj7UserNameDisabled = false;
            private static bool isobj7LoginWithWindowHelloCommandDisabled = false;
            private static bool isobj7VisibilityDisabled = false;
            private static bool isobj7IsEnabledDisabled = false;

            private LoginView_obj1_BindingsTracking bindingsTracking;

            public LoginView_obj1_Bindings()
            {
                this.bindingsTracking = new LoginView_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 56 && columnNumber == 34)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 66)
                {
                    isobj3CommandDisabled = true;
                }
                else if (lineNumber == 33 && columnNumber == 52)
                {
                    isobj6UserNameDisabled = true;
                }
                else if (lineNumber == 33 && columnNumber == 104)
                {
                    isobj6PasswordDisabled = true;
                }
                else if (lineNumber == 34 && columnNumber == 52)
                {
                    isobj6LoginWithPasswordCommandDisabled = true;
                }
                else if (lineNumber == 35 && columnNumber == 52)
                {
                    isobj6VisibilityDisabled = true;
                }
                else if (lineNumber == 36 && columnNumber == 52)
                {
                    isobj6IsEnabledDisabled = true;
                }
                else if (lineNumber == 39 && columnNumber == 52)
                {
                    isobj7UserNameDisabled = true;
                }
                else if (lineNumber == 40 && columnNumber == 52)
                {
                    isobj7LoginWithWindowHelloCommandDisabled = true;
                }
                else if (lineNumber == 41 && columnNumber == 52)
                {
                    isobj7VisibilityDisabled = true;
                }
                else if (lineNumber == 42 && columnNumber == 52)
                {
                    isobj7IsEnabledDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\Login\LoginView.xaml line 55
                        this.obj3 = (global::Windows.UI.Xaml.Controls.HyperlinkButton)target;
                        break;
                    case 6: // Views\Login\LoginView.xaml line 32
                        this.obj6 = (global::Inventory.Views.NamePasswordControl)target;
                        this.bindingsTracking.RegisterTwoWayListener_6(this.obj6);
                        break;
                    case 7: // Views\Login\LoginView.xaml line 38
                        this.obj7 = (global::Inventory.Views.WindowsHelloControl)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ILoginView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Inventory.Views.LoginView)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Inventory.Views.LoginView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::Inventory.ViewModels.LoginViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsLoginWithWindowsHello(obj.IsLoginWithWindowsHello, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ShowLoginWithPasswordCommand(obj.ShowLoginWithPasswordCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_UserName(obj.UserName, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Password(obj.Password, phase);
                        this.Update_ViewModel_LoginWithPasswordCommand(obj.LoginWithPasswordCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsLoginWithPassword(obj.IsLoginWithPassword, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsBusy(obj.IsBusy, phase);
                        this.Update_ViewModel_LoginWithWindowHelloCommand(obj.LoginWithWindowHelloCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_IsLoginWithWindowsHello(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_IsLoginWithWindowsHello_Cast_IsLoginWithWindowsHello_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ViewModel_IsLoginWithWindowsHello_Cast_IsLoginWithWindowsHello_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Login\LoginView.xaml line 55
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, obj);
                    }
                    // Views\Login\LoginView.xaml line 38
                    if (!isobj7VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, obj);
                    }
                }
            }
            private void Update_ViewModel_ShowLoginWithPasswordCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Login\LoginView.xaml line 55
                    if (!isobj3CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_UserName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Login\LoginView.xaml line 32
                    if (!isobj6UserNameDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_NamePasswordControl_UserName(this.obj6, obj, null);
                    }
                    // Views\Login\LoginView.xaml line 38
                    if (!isobj7UserNameDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_WindowsHelloControl_UserName(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Password(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Login\LoginView.xaml line 32
                    if (!isobj6PasswordDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_NamePasswordControl_Password(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_LoginWithPasswordCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Login\LoginView.xaml line 32
                    if (!isobj6LoginWithPasswordCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_NamePasswordControl_LoginWithPasswordCommand(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsLoginWithPassword(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_IsLoginWithPassword_Cast_IsLoginWithPassword_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ViewModel_IsLoginWithPassword_Cast_IsLoginWithPassword_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Login\LoginView.xaml line 32
                    if (!isobj6VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj6, obj);
                    }
                }
            }
            private void Update_ViewModel_IsBusy(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Login\LoginView.xaml line 32
                    if (!isobj6IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj6, (global::System.Boolean)this.LookupConverter("BoolNegationConverter").Convert(obj, typeof(global::System.Boolean), null, null));
                    }
                    // Views\Login\LoginView.xaml line 38
                    if (!isobj7IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj7, (global::System.Boolean)this.LookupConverter("BoolNegationConverter").Convert(obj, typeof(global::System.Boolean), null, null));
                    }
                }
            }
            private void Update_ViewModel_LoginWithWindowHelloCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Login\LoginView.xaml line 38
                    if (!isobj7LoginWithWindowHelloCommandDisabled)
                    {
                        XamlBindingSetters.Set_Inventory_Views_WindowsHelloControl_LoginWithWindowHelloCommand(this.obj7, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_6_UserName()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.UserName = this.obj6.UserName;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class LoginView_obj1_BindingsTracking
            {
                private global::System.WeakReference<LoginView_obj1_Bindings> weakRefToBindingObj; 

                public LoginView_obj1_BindingsTracking(LoginView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<LoginView_obj1_Bindings>(obj);
                }

                public LoginView_obj1_Bindings TryGetBindingObject()
                {
                    LoginView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    LoginView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Inventory.ViewModels.LoginViewModel obj = sender as global::Inventory.ViewModels.LoginViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_IsLoginWithWindowsHello(obj.IsLoginWithWindowsHello, DATA_CHANGED);
                                bindings.Update_ViewModel_UserName(obj.UserName, DATA_CHANGED);
                                bindings.Update_ViewModel_IsLoginWithPassword(obj.IsLoginWithPassword, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsLoginWithWindowsHello":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsLoginWithWindowsHello(obj.IsLoginWithWindowsHello, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UserName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_UserName(obj.UserName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsLoginWithPassword":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsLoginWithPassword(obj.IsLoginWithPassword, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Inventory.ViewModels.LoginViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Inventory.ViewModels.LoginViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void RegisterTwoWayListener_6(global::Inventory.Views.NamePasswordControl sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Inventory.Views.NamePasswordControl.UserNameProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_UserName();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\Login\LoginView.xaml line 23
                {
                    global::Windows.UI.Xaml.Controls.TextBox element2 = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBox)element2).GotFocus += this.OnBackgroundFocus;
                }
                break;
            case 3: // Views\Login\LoginView.xaml line 55
                {
                    global::Windows.UI.Xaml.Controls.HyperlinkButton element3 = (global::Windows.UI.Xaml.Controls.HyperlinkButton)(target);
                    ((global::Windows.UI.Xaml.Controls.HyperlinkButton)element3).Click += this.OnShowLoginWithPassword;
                }
                break;
            case 4: // Views\Login\LoginView.xaml line 30
                {
                    this.foreground = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 5: // Views\Login\LoginView.xaml line 31
                {
                    global::Windows.UI.Xaml.Controls.Grid element5 = (global::Windows.UI.Xaml.Controls.Grid)(target);
                    ((global::Windows.UI.Xaml.Controls.Grid)element5).GotFocus += this.OnForegroundFocus;
                }
                break;
            case 6: // Views\Login\LoginView.xaml line 32
                {
                    this.passwordView = (global::Inventory.Views.NamePasswordControl)(target);
                }
                break;
            case 7: // Views\Login\LoginView.xaml line 38
                {
                    this.helloView = (global::Inventory.Views.WindowsHelloControl)(target);
                }
                break;
            case 8: // Views\Login\LoginView.xaml line 18
                {
                    this.background = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Login\LoginView.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    LoginView_obj1_Bindings bindings = new LoginView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

